

<EditForm Model="@Utility" OnSubmit="@SaveUtility">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row my-2">
        <div class="col-4 mb-2">
            <div class="form-floating">
                <InputText @bind-Value="Utility.Provider" class="form-control form-control-sm" />
                <label>Provider</label>
            </div>
        </div>
        <div class="col-4 mb-2">
            <div class="form-floating">
                <InputSelect @bind-Value="Utility.UtilityType" class="form-select form-select-sm">
                    @foreach (var value in Enum.GetValues<EUtilityType>())
                    {
                        <option value="@value">@value</option>
                    }
                </InputSelect>
                <label class="form-label">Utility Type</label>
            </div>
        </div>
        <div class="col-4 mb-2">
            <div class="form-floating">
                <InputNumber @bind-Value="Utility.ContractLength" class="form-control form-control-sm" />
                <label>Contract Length</label>
            </div>
        </div>
        <div class="col-4 mb-2">
            <div class="form-floating">
                <InputDate @bind-Value="Utility.ContractEndDate" class="form-control form-control-sm" />
                <label>Contract End Date</label>
            </div>
        </div>
        <div class="col-4 mb-2">
            <div class="form-floating">
                <InputNumber @bind-Value="Utility.CurrentPrice" class="form-control form-control-sm" />
                <label>Current Price</label>
            </div>
        </div>
        <div class="col-4 mb-2">
            <div class="form-floating">
                <InputNumber @bind-Value="Utility.NotificationTime" class="form-control form-control-sm" />
                <label>Alert Months Before</label>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</EditForm>



@code {
    [Parameter]
    public EventCallback DoneEditing { get; set; }

    [Parameter]
    public UtilityModel? Utility { get; set; }

    protected override void OnInitialized()
    {
        if (Utility == null)
        {
            Utility = new UtilityModel();
        }
    }

    private async Task SaveUtility()
    {
        var test = Utility;

        await DoneEditing.InvokeAsync();
    }

    private async Task DeleteUtility()
    {

    }
}
